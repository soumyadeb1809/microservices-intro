package com.soumya.microservices.resources;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.soumya.microservices.models.CatelogItem;
import com.soumya.microservices.models.Movie;
import com.soumya.microservices.models.Rating;
import com.soumya.microservices.models.UserRating;

@RestController
@RequestMapping("/catalog")
public class MovieCatalogResource {
	
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private WebClient.Builder webClientBuilder;
	
	
	@RequestMapping("/{userId}")
	@HystrixCommand(fallbackMethod = "getFallbackCatalog")
	public List<CatelogItem> getCatalog(@PathVariable("userId") String userId){

		// Get all rated movie IDs
		UserRating userRating = getUserRating(userId);
		List<Rating> ratings = userRating.getUserRating();
		
		// For each movie ID call movie info service
		return ratings.stream()
				.map(rating -> getCatalogItem(rating))
				.collect(Collectors.toList());

	}
	
	public List<CatelogItem> getFallbackCatalog(@PathVariable("userId") String userId){
		return Arrays.asList(new CatelogItem("No movie", "", 0));
	}
	
	
	@HystrixCommand(fallbackMethod = "getFallbackUserRating")
	private UserRating getUserRating(String userId) {
		return restTemplate.getForObject("http://movie-rating-service/rating/users/" + userId, UserRating.class);
	}
	
	private UserRating getFallbackUserRating(String userId) {
		UserRating userRating = new UserRating();
		userRating.setUserRating(Arrays.asList(
				new Rating("0", 0)
		));
		return userRating;
	}

	
	@HystrixCommand(fallbackMethod = "getFallbackCatalogItem")
	private CatelogItem getCatalogItem(Rating rating) {
		Movie movie = restTemplate.getForObject("http://movie-info-service/movies/" + rating.getMovieId(), Movie.class);
		
		/*
		 Movie movie = webClientBuilder.build()
			.get()
			.uri("http://localhost:8082/movies/" + rating.getMovieId())
			.retrieve()
			.bodyToMono(Movie.class)
			.block();	// Block execution till the execution of Mono is completed 
		*/
		
		return new CatelogItem(movie.getName(), "Some fancy movie description.", rating.getRating());
	}
	
}
